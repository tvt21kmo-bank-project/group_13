-- MySQL Script generated by MySQL Workbench
-- Tue Dec  7 17:36:47 2021
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema bank_simul
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema bank_simul
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `bank_simul` DEFAULT CHARACTER SET utf8 ;
USE `bank_simul` ;

-- -----------------------------------------------------
-- Table `bank_simul`.`accounts`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `bank_simul`.`accounts` (
  `idaccount` INT NOT NULL AUTO_INCREMENT,
  `idOwner` INT NOT NULL,
  `balance` BIGINT NULL DEFAULT NULL,
  PRIMARY KEY (`idaccount`))
ENGINE = InnoDB
AUTO_INCREMENT = 24
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `bank_simul`.`customers`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `bank_simul`.`customers` (
  `idcustomer` INT NOT NULL AUTO_INCREMENT,
  `firstname` VARCHAR(45) NULL DEFAULT NULL,
  `lastname` VARCHAR(45) NULL DEFAULT NULL,
  `address` VARCHAR(45) NULL DEFAULT NULL,
  `phone` INT NULL DEFAULT NULL,
  PRIMARY KEY (`idcustomer`))
ENGINE = InnoDB
AUTO_INCREMENT = 41
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `bank_simul`.`accounts_has_customers`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `bank_simul`.`accounts_has_customers` (
  `idAccount` INT NOT NULL,
  `idCustomer` INT NOT NULL,
  INDEX `fk_accounts_has_customers_customers1_idx` (`idCustomer` ASC) VISIBLE,
  INDEX `fk_accounts_has_customers_accounts_idx` (`idAccount` ASC) VISIBLE,
  CONSTRAINT `fk_accounts_has_customers_accounts`
    FOREIGN KEY (`idAccount`)
    REFERENCES `bank_simul`.`accounts` (`idaccount`),
  CONSTRAINT `fk_accounts_has_customers_customers1`
    FOREIGN KEY (`idCustomer`)
    REFERENCES `bank_simul`.`customers` (`idcustomer`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `bank_simul`.`cards`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `bank_simul`.`cards` (
  `idcard` INT NOT NULL AUTO_INCREMENT,
  `pin` SMALLINT NULL DEFAULT NULL,
  `failed_attempts` TINYINT NULL DEFAULT NULL,
  `has_credit` TINYINT NULL DEFAULT NULL,
  `idaccount` INT NOT NULL,
  `idcustomer` INT NOT NULL,
  PRIMARY KEY (`idcard`),
  INDEX `fk_cards_accounts1_idx` (`idaccount` ASC) VISIBLE,
  INDEX `fk_cards_customers1_idx` (`idcustomer` ASC) VISIBLE,
  CONSTRAINT `fk_cards_accounts1`
    FOREIGN KEY (`idaccount`)
    REFERENCES `bank_simul`.`accounts` (`idaccount`),
  CONSTRAINT `fk_cards_customers1`
    FOREIGN KEY (`idcustomer`)
    REFERENCES `bank_simul`.`customers` (`idcustomer`))
ENGINE = InnoDB
AUTO_INCREMENT = 17
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `bank_simul`.`credit`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `bank_simul`.`credit` (
  `idcredit` INT NOT NULL AUTO_INCREMENT,
  `credit_limit` INT NULL DEFAULT NULL,
  `balance` INT NULL DEFAULT NULL,
  `idaccount` INT NOT NULL,
  PRIMARY KEY (`idcredit`),
  INDEX `fk_credit_accounts1_idx` (`idaccount` ASC) VISIBLE,
  CONSTRAINT `fk_credit_accounts1`
    FOREIGN KEY (`idaccount`)
    REFERENCES `bank_simul`.`accounts` (`idaccount`))
ENGINE = InnoDB
AUTO_INCREMENT = 16
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `bank_simul`.`transactions`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `bank_simul`.`transactions` (
  `idtransaction` INT NOT NULL AUTO_INCREMENT,
  `transaction_type` TINYINT NULL DEFAULT NULL,
  `transaction_amount` INT NULL DEFAULT NULL,
  `transaction_time` DATETIME NULL DEFAULT CURRENT_TIMESTAMP,
  `idaccount` INT NOT NULL,
  `idcard` INT NULL DEFAULT NULL,
  PRIMARY KEY (`idtransaction`),
  INDEX `fk_transactions_accounts1_idx` (`idaccount` ASC) VISIBLE,
  CONSTRAINT `fk_transactions_accounts1`
    FOREIGN KEY (`idaccount`)
    REFERENCES `bank_simul`.`accounts` (`idaccount`))
ENGINE = InnoDB
AUTO_INCREMENT = 29
DEFAULT CHARACTER SET = utf8;

USE `bank_simul` ;

-- -----------------------------------------------------
-- procedure kirjaudu_sisaan
-- -----------------------------------------------------

DELIMITER $$
USE `bank_simul`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `kirjaudu_sisaan`(
IN korttiID INT,
IN korttiPIN INT)
Aliohjelma:
BEGIN
	DECLARE tiliID INT DEFAULT 0;
    DECLARE failCount INT DEFAULT 0;
    DECLARE credit BOOL DEFAULT false;
    DECLARE asiakas INT DEFAULT 0;
    DECLARE etunimi VARCHAR(45) DEFAULT NULL;
    DECLARE sukunimi VARCHAR(45) DEFAULT NULL;
    SELECT failed_attempts INTO failCount FROM cards WHERE idcard=korttiID;
    IF failCount >= 3 THEN
		SELECT failCount;
        LEAVE Aliohjelma;
	END IF;
    SELECT idaccount INTO tiliID FROM cards WHERE idcard=korttiID AND pin=korttiPIN;
    IF tiliID=0 THEN
        UPDATE cards
        SET failed_attempts=failed_attempts+1
        WHERE idcard=korttiID;
		SELECT failed_attempts INTO failCount FROM cards WHERE idcard=korttiID;
		SELECT failCount;
        LEAVE Aliohjelma;
	ELSE
        UPDATE cards
        SET failed_attempts=0
        WHERE idcard=korttiID;
        SELECT has_credit INTO credit FROM cards WHERE idCard=korttiID;
        SELECT idCustomer INTO asiakas FROM cards WHERE idCard=korttiID;
        SELECT firstname INTO etunimi FROM customers WHERE idCustomer=asiakas;
        SELECT lastname INTO sukunimi FROM customers WHERE idCustomer=asiakas;
        SELECT tiliID,credit,etunimi,sukunimi;
	END IF;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure lisaa_asiakas
-- -----------------------------------------------------

DELIMITER $$
USE `bank_simul`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `lisaa_asiakas`(
IN etunimi VARCHAR(45),
IN sukunimi VARCHAR(45),
IN tiliID INT)
BEGIN
	DECLARE tili INT DEFAULT 0;
    DECLARE asiakas INT DEFAULT 0;
	INSERT INTO customers (firstname, lastname) VALUES (etunimi, sukunimi);
    SELECT LAST_INSERT_ID() INTO asiakas;
    SELECT idaccount INTO tili FROM accounts WHERE idaccount=tiliID;
    IF tili=0 THEN
		CALL lisaa_tili(asiakas);
	ELSE
		INSERT INTO accounts_has_customers (idAccount, idCustomer) VALUES (tili, asiakas);
        SELECT 'Asiakas lisätty', asiakas, tili;
	END IF;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure lisaa_asiakas_tilille
-- -----------------------------------------------------

DELIMITER $$
USE `bank_simul`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `lisaa_asiakas_tilille`(
IN asiakasID INT,
IN tiliID INT)
Aliohjelma:
BEGIN
	DECLARE tili INT DEFAULT 0;
    DECLARE asiakas INT DEFAULT 0;
    SELECT idaccount INTO tili FROM accounts WHERE idaccount=tiliID;
    SELECT idcustomer INTO asiakas FROM customers WHERE idcustomer=asiakasID;
    IF tili=0 OR asiakas=0 THEN
		SELECT 'Tiliä tai asiakasta ei ole olemassa.';
        LEAVE Aliohjelma;
	END IF;
    SET tili=0;
    SELECT idAccount INTO tili FROM accounts_has_customers WHERE idAccount=tiliID AND idCustomer=asiakasID;
    IF tili=0 THEN    
        INSERT INTO accounts_has_customers (idAccount,idCustomer) VALUES (tiliID,asiakasID);
		SELECT 'Asiakas lisätty tilille', tiliID, asiakasID;
	ELSE 
		SELECT 'Asiakas on jo tilillä', tiliID, asiakasID;
	END IF;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure lisaa_tili
-- -----------------------------------------------------

DELIMITER $$
USE `bank_simul`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `lisaa_tili`(
IN asiakasID INT)
BEGIN
	DECLARE asiakas INT DEFAULT 0;
    DECLARE tili INT DEFAULT 0;
    SELECT idcustomer INTO asiakas FROM customers WHERE idcustomer=asiakasID;
    IF asiakas=0 THEN
		SELECT 'asiakasta ei ole olemassa';
	ELSE
		INSERT INTO accounts (idOwner) values(asiakasID);
        SELECT LAST_INSERT_ID() INTO tili;
        INSERT INTO accounts_has_customers (idAccount,idCustomer) VALUES (tili,asiakasID);
        INSERT INTO credit (idaccount) VALUES (tili);
        SELECT 'Tili lisätty', asiakas, tili;
    END IF;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure muokkaa_luottoa
-- -----------------------------------------------------

DELIMITER $$
USE `bank_simul`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `muokkaa_luottoa`(
IN luottoraja INT,
IN saldo INT,
IN tiliID INT)
BEGIN
    DECLARE luottotili INT DEFAULT 0;
    SELECT idcredit INTO luottotili FROM credit WHERE idaccount=tiliID;
    IF luottotili=0 THEN
		SELECT 'Tilille ei ole liitetty luottotiliä', tiliID;
    ELSE
		UPDATE credit SET credit_limit=luottoraja, balance=saldo WHERE idcredit=luottotili;
        SELECT luottotili,tiliID,luottoraja,saldo;
	END IF;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure nosta_rahaa
-- -----------------------------------------------------

DELIMITER $$
USE `bank_simul`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `nosta_rahaa`(
IN tiliID INT,
IN korttiID INT,
IN luotto BOOL,
IN summa INT)
BEGIN
	DECLARE saldo INT DEFAULT 0;
    DECLARE luottoraja INT DEFAULT 0;
	IF luotto=false THEN
		SELECT balance INTO saldo FROM accounts WHERE idaccount=tiliID;
        IF summa <= saldo THEN
			UPDATE accounts SET balance=balance-summa WHERE idaccount=tiliID;
            INSERT INTO transactions (transaction_type,transaction_amount,idaccount,idcard) VALUES(0, summa, tiliID, korttiID);
			SELECT 'OK';
        ELSE
			SELECT 'FAIL';
        END IF;
	ELSE
		SELECT balance INTO saldo FROM credit WHERE idaccount=tiliID;
        SELECT credit_limit INTO luottoraja FROM credit WHERE idaccount=tiliID;
        IF summa+saldo <= luottoraja THEN
			UPDATE credit SET balance=balance+summa WHERE idaccount=tiliID;
            INSERT INTO transactions (transaction_type,transaction_amount,idaccount,idcard) VALUES(1, summa, tiliID, korttiID);
			SELECT 'OK';
        ELSE
			SELECT 'FAIL';
        END IF;        
    END IF;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure poista_asiakas
-- -----------------------------------------------------

DELIMITER $$
USE `bank_simul`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `poista_asiakas`(
IN asiakasID INT)
BEGIN
	DELETE FROM accounts_has_customers WHERE idCustomer=asiakasID;
	DELETE FROM customers WHERE idcustomer=asiakasID;
    DELETE FROM accounts WHERE idOwner=asiakasID;
    DELETE FROM cards WHERE idcustomer=asiakasID;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure poista_asiakas_tililta
-- -----------------------------------------------------

DELIMITER $$
USE `bank_simul`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `poista_asiakas_tililta`(
IN asiakasID INT,
IN tiliID INT)
BEGIN
	DECLARE tili INT DEFAULT 0;
    DECLARE omistaja INT DEFAULT 0;
    SELECT idAccount INTO tili FROM accounts_has_customers WHERE idAccount=tiliID AND idCustomer=asiakasID;
    IF tili=0 THEN    
		SELECT 'Asiakas ei ole tilillä', tiliID, asiakasID;
	ELSE 
		DELETE FROM accounts_has_customers WHERE idAccount=tiliID AND idCustomer=asiakasID;
        DELETE FROM cards WHERE idaccount=tiliID AND idcustomer=asiakasID;
        SELECT idOwner INTO omistaja FROM accounts WHERE idOwner=asiakasID AND idaccount=tiliID;
        IF omistaja != 0 THEN
			DELETE FROM accounts_has_customers WHERE idAccount = tiliID;
            SET tili=0;
            SELECT idaccount INTO tili FROM accounts WHERE idOwner=asiakasID AND idaccount=tiliID;
            IF tili !=0 THEN
				CALL poista_tili(tili);
            END IF;
        END IF;
		SELECT 'Asiakas poistettu tililtä', tiliID, asiakasID;
	END IF;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure poista_tili
-- -----------------------------------------------------

DELIMITER $$
USE `bank_simul`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `poista_tili`(
IN tiliID INT)
BEGIN
	DELETE FROM accounts_has_customers WHERE idAccount=tiliID;
    DELETE FROM credit WHERE idaccount=tiliID;
	DELETE FROM cards WHERE idaccount=tiliID;
	DELETE FROM accounts WHERE idaccount=tiliID;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure selaa_tilitapahtumia
-- -----------------------------------------------------

DELIMITER $$
USE `bank_simul`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `selaa_tilitapahtumia`(
IN tiliID INT,
IN alkaen_tapahtumasta INT)
BEGIN
	SELECT * FROM transactions WHERE idaccount=tiliID ORDER BY transaction_time DESC LIMIT alkaen_tapahtumasta,10;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure tarkista_saldo
-- -----------------------------------------------------

DELIMITER $$
USE `bank_simul`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `tarkista_saldo`(
IN tiliID INT,
IN luotto BOOL)
Aliohjelma:
BEGIN
	DECLARE saldo BIGINT DEFAULT 0;
    DECLARE luottoraja INT DEFAULT 0;
	IF luotto = false THEN
		SELECT balance INTO saldo FROM accounts WHERE idaccount=tiliID;
        SELECT saldo;
	ELSE
		SELECT balance INTO saldo FROM credit WHERE idaccount=tiliID;
        SELECT credit_limit INTO luottoraja FROM credit WHERE idaccount=tiliID;
        SELECT saldo,luottoraja;
	END IF;
    SELECT * FROM transactions WHERE idaccount=tiliID ORDER BY transaction_time DESC LIMIT 5;
END$$

DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
